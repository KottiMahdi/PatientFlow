import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'delete_page.dart';
import 'add_page.dart';

class Patient {
  final String id;
  final String name;
  final String time;
  final String date;
  final DateTime createdAt;
  PatientStatus status;

  Patient({
    required this.id,
    required this.name,
    required this.time,
    required this.date,
    required this.createdAt,
    this.status = PatientStatus.RDV,
  });
}

enum PatientStatus { waiting, inConsultation, completed, RDV }

class WaitingRoomMainPage extends StatefulWidget {
  const WaitingRoomMainPage({Key? key}) : super(key: key);

  @override
  _WaitingRoomMainPageState createState() => _WaitingRoomMainPageState();
}

class _WaitingRoomMainPageState extends State<WaitingRoomMainPage> {
  List<Patient> waitingPatients = [];
  List<Patient> inConsultationPatients = [];
  List<Patient> completedPatients = [];
  List<Patient> RDVPatients = [];
  DateTime? selectedDate = DateTime.now();
  bool _isManualDateSelection = false;

  @override
  void initState() {
    super.initState();
    fetchPatients();
  }

  void fetchPatients() {
    FirebaseFirestore.instance
        .collection('waiting_room')
        .orderBy('createdAt')
        .snapshots()
        .listen((snapshot) {
      setState(() {
        waitingPatients.clear();
        inConsultationPatients.clear();
        completedPatients.clear();
        RDVPatients.clear();

        for (var doc in snapshot.docs) {
          var data = doc.data();
          Patient patient = Patient(
            id: doc.id,
            name: data['name'] ?? 'N/A',
            time: data['time'] ?? 'N/A',
            createdAt: (data['createdAt'] as Timestamp).toDate(),
            status: PatientStatus.values.firstWhere(
                  (e) => e.toString().split('.').last == data['status'],
              orElse: () => PatientStatus.RDV,
            ),
            date: data['date'] ?? 'N/A',
          );

          switch (patient.status) {
            case PatientStatus.RDV:
              RDVPatients.add(patient);
              break;
            case PatientStatus.waiting:
              waitingPatients.add(patient);
              break;
            case PatientStatus.inConsultation:
              inConsultationPatients.add(patient);
              break;
            case PatientStatus.completed:
              completedPatients.add(patient);
              break;
          }

          if (selectedDate != null) {
            final selectedDateString = DateFormat('d/M/yyyy').format(selectedDate!);
            RDVPatients = RDVPatients.where((p) => p.date == selectedDateString).toList();
            waitingPatients = waitingPatients.where((p) => p.date == selectedDateString).toList();
            inConsultationPatients = inConsultationPatients.where((p) => p.date == selectedDateString).toList();
            completedPatients = completedPatients.where((p) => p.date == selectedDateString).toList();
          }
        }
      });
    });
  }

  void _movePatient(Patient patient, PatientStatus newStatus) {
    FirebaseFirestore.instance
        .collection('waiting_room')
        .doc(patient.id)
        .update({'status': newStatus.toString().split('.').last});
  }

  Future<void> selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate ?? DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime(2101),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: Color(0xFF2A79B0),
              onPrimary: Colors.white,
              onSurface: Colors.black,
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(foregroundColor: Color(0xFF2A79B0)),
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null && picked != selectedDate) {
      setState(() {
        selectedDate = picked;
        _isManualDateSelection = true;
      });
      fetchPatients();
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isTablet = screenWidth > 600;

    return Scaffold(
      backgroundColor: const Color(0xFFF5F7FA),
      appBar: AppBar(
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFF2A79B0), Color(0xFF2A79B0)],
            ),
          ),
        ),
        title: Row(
          children: [
             Flexible(
              child: Text(
                DateFormat('EEEE, d MMMM yyyy').format(selectedDate!),
                style: TextStyle(
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                  fontSize: screenWidth * 0.04,
                  letterSpacing: 0.5,
                ),
              ),
            ),
          ],
        ),
        actions: [
          Container(
            margin: EdgeInsets.symmetric(horizontal: screenWidth * 0.02),
            decoration: BoxDecoration(
              color: Colors.white24,
              borderRadius: BorderRadius.circular(screenWidth * 0.02),
            ),
            child: IconButton(
              icon: Icon(Icons.calendar_today, size: screenWidth * 0.06, color: Colors.white),
              onPressed: () => selectDate(context),
            ),
          ),
          if (_isManualDateSelection)
            Container(
              margin: EdgeInsets.only(right: screenWidth * 0.02),
              decoration: BoxDecoration(
                color: Colors.white24,
                borderRadius: BorderRadius.circular(screenWidth * 0.02),
              ),
              child: IconButton(
                icon: Icon(Icons.refresh, size: screenWidth * 0.06, color: Colors.white),
                onPressed: () {
                  setState(() {
                    selectedDate = DateTime.now();
                    _isManualDateSelection = false;
                  });
                  fetchPatients();
                },
              ),
            )
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFFEBF0F5), Color(0xFFF5F7FA)],
          ),
        ),
        child: LayoutBuilder(
          builder: (context, constraints) {
            return SingleChildScrollView(
              physics: const BouncingScrollPhysics(),
              child: Padding(
                padding: EdgeInsets.symmetric(
                  horizontal: screenWidth * 0.04,
                  vertical: screenWidth * 0.02,
                ),
                child: isTablet
                    ? GridView.count(
                  crossAxisCount: screenWidth > 1200 ? 4 : 2,
                  childAspectRatio: 0.9,
                  crossAxisSpacing: screenWidth * 0.03,
                  mainAxisSpacing: screenWidth * 0.02,
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  children: [
                    _buildColumn(context, RDVPatients, PatientStatus.RDV),
                    _buildColumn(context, waitingPatients, PatientStatus.waiting),
                    _buildColumn(context, inConsultationPatients, PatientStatus.inConsultation),
                    _buildColumn(context, completedPatients, PatientStatus.completed),
                  ],
                )
                    : Column(
                  children: [
                    _buildColumn(context, RDVPatients, PatientStatus.RDV),
                    SizedBox(height: screenWidth * 0.03),
                    _buildColumn(context, waitingPatients, PatientStatus.waiting),
                    SizedBox(height: screenWidth * 0.03),
                    _buildColumn(context, inConsultationPatients, PatientStatus.inConsultation),
                    SizedBox(height: screenWidth * 0.03),
                    _buildColumn(context, completedPatients, PatientStatus.completed),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildColumn(BuildContext context, List<Patient> patients, PatientStatus status) {
    final Map<PatientStatus, Map<String, dynamic>> columnData = {
      PatientStatus.RDV: {
        'title': "Appointments",
        'icon': Icons.event_note,
        'color': const Color(0xFF42A5F5),
        'nextStatus': PatientStatus.waiting,
      },
      PatientStatus.waiting: {
        'title': "Waiting Patients",
        'icon': Icons.people_alt,
        'color': const Color(0xFF66BB6A),
        'nextStatus': PatientStatus.inConsultation,
      },
      PatientStatus.inConsultation: {
        'title': "In Consultation",
        'icon': Icons.medical_services,
        'color': const Color(0xFFFF9800),
        'nextStatus': PatientStatus.completed,
      },
      PatientStatus.completed: {
        'title': "Consultation Completed",
        'icon': Icons.check_circle,
        'color': const Color(0xFF8E24AA),
        'nextStatus': PatientStatus.RDV,
      },
    };

    return WaitingRoomColumn(
      title: columnData[status]!['title'] as String,
      icon: columnData[status]!['icon'] as IconData,
      color: columnData[status]!['color'] as Color,
      patients: patients,
      onPatientMove: (patient) => _movePatient(patient, columnData[status]!['nextStatus'] as PatientStatus),
      onPatientDropped: (patient) => _movePatient(patient, status),
      targetStatus: status,
    );
  }
}

class WaitingRoomColumn extends StatelessWidget {
  final String title;
  final IconData icon;
  final Color color;
  final List<Patient> patients;
  final Function(Patient) onPatientMove;
  final Function(Patient) onPatientDropped;
  final PatientStatus targetStatus;

  const WaitingRoomColumn({
    Key? key,
    required this.title,
    this.icon = Icons.group,
    this.color = const Color(0xFF2C79F4),
    required this.patients,
    required this.onPatientMove,
    required this.onPatientDropped,
    required this.targetStatus,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;

    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(screenWidth * 0.04),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.15),
            spreadRadius: 2,
            blurRadius: screenWidth * 0.03,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: EdgeInsets.symmetric(
                horizontal: screenWidth * 0.05,
                vertical: screenHeight * 0.02),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [color, color.withOpacity(0.8)],
              ),
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(screenWidth * 0.04),
                topRight: Radius.circular(screenWidth * 0.04),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Flexible(
                  child: Row(
                    children: [
                      Icon(icon, color: Colors.white, size: screenWidth * 0.06),
                      SizedBox(width: screenWidth * 0.03),
                      Flexible(
                        child: Text(
                          title,
                          style: TextStyle(
                            fontSize: screenWidth * 0.04,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Row(
                  children: [
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: screenWidth * 0.03,
                        vertical: screenHeight * 0.005,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.25),
                        borderRadius: BorderRadius.circular(screenWidth * 0.1),
                      ),
                      child: Text(
                        '${patients.length}',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: screenWidth * 0.04,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          DragTarget<Patient>(
            onAccept: (patient) => onPatientDropped(patient),
            builder: (context, candidateData, rejectedData) {
              if (patients.isEmpty) {
                return Container(
                  padding: EdgeInsets.all(screenWidth * 0.05),
                  child: Column(
                    children: [
                      Icon(Icons.not_interested,
                          size: screenWidth * 0.15,
                          color: Colors.grey.withOpacity(0.5)),
                      SizedBox(height: screenHeight * 0.02),
                      Text(
                        "No patients available",
                        style: TextStyle(
                          color: Colors.grey,
                          fontSize: screenWidth * 0.04,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                );
              }
              return Padding(
                padding: EdgeInsets.symmetric(vertical: screenHeight * 0.01),
                child: Column(
                  children: patients.map((patient) {
                    return LongPressDraggable<Patient>(
                      data: patient,
                      feedback: Material(
                        elevation: 8,
                        borderRadius: BorderRadius.circular(screenWidth * 0.04),
                        child: Container(
                          width: screenWidth * 0.8,
                          padding: EdgeInsets.all(screenWidth * 0.04),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(screenWidth * 0.04),
                            border: Border.all(
                              color: color.withOpacity(0.3),
                              width: 2,
                            ),
                          ),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundColor: color.withOpacity(0.1),
                                radius: screenWidth * 0.06,
                                child: Icon(Icons.person,
                                    color: color,
                                    size: screenWidth * 0.06),
                              ),
                              SizedBox(width: screenWidth * 0.04),
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(patient.name,
                                      style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: screenWidth * 0.04)),
                                  Text("Time: ${patient.time}",
                                      style: TextStyle(
                                          color: Colors.black54,
                                          fontSize: screenWidth * 0.035)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),
                      childWhenDragging: Container(
                        margin: EdgeInsets.symmetric(
                          horizontal: screenWidth * 0.04,
                          vertical: screenHeight * 0.01,
                        ),
                        height: screenHeight * 0.1,
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(screenWidth * 0.04),
                          border: Border.all(
                            color: Colors.grey.withOpacity(0.2),
                            width: 2,
                          ),
                        ),
                        child: Center(
                          child: Text("Moving...",
                              style: TextStyle(
                                  color: Colors.grey,
                                  fontSize: screenWidth * 0.04)),
                        ),
                      ),
                      child: Card(
                        margin: EdgeInsets.symmetric(
                          horizontal: screenWidth * 0.04,
                          vertical: screenHeight * 0.01,
                        ),
                        elevation: 3,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(screenWidth * 0.04),
                          side: BorderSide(
                            color: color.withOpacity(0.2),
                            width: 1,
                          ),
                        ),
                        child: Padding(
                          padding: EdgeInsets.all(screenWidth * 0.02),
                          child: _buildPatientTile(patient, context),
                        ),
                      ),
                    );
                  }).toList(),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildPatientTile(Patient patient, BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;

    return ListTile(
      contentPadding: EdgeInsets.symmetric(
          horizontal: screenWidth * 0.04, vertical: screenHeight * 0.01),
      leading: Container(
        width: screenWidth * 0.12,
        height: screenWidth * 0.12,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: LinearGradient(
            colors: [
              color.withOpacity(0.1),
              color.withOpacity(0.2)
            ],
          ),
        ),
        child: Icon(Icons.person,
            color: color,
            size: screenWidth * 0.07),
      ),
      title: Text(patient.name,
          style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: screenWidth * 0.04)),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.access_time,
                  size: screenWidth * 0.035),
              SizedBox(width: screenWidth * 0.01),
              Text(patient.time,
                  style: TextStyle(fontSize: screenWidth * 0.035)),
            ],
          ),
          Row(
            children: [
              Icon(Icons.calendar_today,
                  size: screenWidth * 0.035),
              SizedBox(width: screenWidth * 0.01),
              Text(patient.date,
                  style: TextStyle(fontSize: screenWidth * 0.035)),
            ],
          ),
        ],
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(screenWidth * 0.02),
            ),
            child: IconButton(
              icon: Icon(Icons.arrow_forward,
                  color: color,
                  size: screenWidth * 0.05),
              onPressed: () => onPatientMove(patient),
            ),
          ),
          SizedBox(width: screenWidth * 0.02),
          Container(
            decoration: BoxDecoration(
              color: Colors.red.withOpacity(0.1),
              borderRadius: BorderRadius.circular(screenWidth * 0.02),
            ),
            child: DeletePatientService.buildDeleteButton(
              context: context,
              patientName: patient.name,
              patientId: patient.id,
            ),
          ),
        ],
      ),
    );
  }
}